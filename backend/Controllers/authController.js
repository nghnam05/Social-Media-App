const path = require("path");
const fs = require("fs");
const jwt = require("jsonwebtoken");
const hbs = require("hbs");

const User = require("../Models/userSchemas");
const catchAsync = require("../src/utils/catchAsync");
const AppError = require("../src/utils/appError");
const generateOTP = require("../src/utils/generateOTP");
const sendMail = require("../src/utils/email");

// ==============================
// üìå H√†m load template email
// ==============================
const loadTemplate = (templateName, replacements) => {
  const templatePath = path.join(__dirname, "../Email", templateName);
  const source = fs.readFileSync(templatePath, "utf-8");
  const template = hbs.compile(source);
  return template(replacements);
};

// ==============================
// üìå T·∫°o JWT token v√† g·ª≠i cookie
// ==============================
const signToken = (id) => {
  return jwt.sign({ id }, process.env.JWT_SECRET, {
    expiresIn: process.env.JWT_EXPIRES_IN,
  });
};

const createSendToken = (user, statusCode, res, message) => {
  const token = signToken(user._id);

  const cookieOptions = {
    expires: new Date(
      Date.now() +
        Number(process.env.JWT_COOKIE_EXPIRES_IN) * 24 * 60 * 60 * 1000
    ),
    httpOnly: true,
    secure: process.env.NODE_ENV === "production",
    sameSite: process.env.NODE_ENV === "production" ? "none" : "lax",
  };

  res.cookie("token", token, cookieOptions);
  user.password = undefined;
  user.otp = undefined;

  res.status(statusCode).json({
    status: "success",
    message,
    token,
    data: { user },
  });
};

// ==============================
// üìå X·ª≠ l√Ω ƒëƒÉng k√Ω t√†i kho·∫£n + g·ª≠i OTP
// ==============================
exports.signup = catchAsync(async (req, res, next) => {
  const { email, password, passwordConfirm, username } = req.body;

  // 1Ô∏è‚É£ Ki·ªÉm tra email ƒë√£ t·ªìn t·∫°i ch∆∞a
  const existingUser = await User.findOne({ email });
  if (existingUser) {
    return next(new AppError("Email ƒë√£ t·ªìn t·∫°i trong h·ªá th·ªëng!", 400));
  }

  // 2Ô∏è‚É£ T·∫°o OTP & th·ªùi gian h·∫øt h·∫°n
  const otp = generateOTP();
  const otpExpires = Date.now() + 15 * 60 * 1000; // OTP h·∫øt h·∫°n sau 15 ph√∫t

  // 3Ô∏è‚É£ T·∫°o t√†i kho·∫£n t·∫°m
  const newUser = await User.create({
    username,
    email,
    password,
    passwordConfirm,
    otp,
    otpExpires,
  });

  // 4Ô∏è‚É£ Load template email
  const htmlTemplate = loadTemplate("emailTemplate.hbs", {
    title: "X√°c minh t√†i kho·∫£n c·ªßa b·∫°n",
    username: newUser.username,
    otp,
    message: "M√£ OTP c·ªßa b·∫°n l√†:",
  });

  // 5Ô∏è‚É£ G·ª≠i email OTP
  try {
    await sendMail({
      email: newUser.email,
      subject: "M√£ OTP X√°c Minh T√†i Kho·∫£n",
      html: htmlTemplate,
    });

    // 6Ô∏è‚É£ G·ª≠i ph·∫£n h·ªìi sau khi g·ª≠i email th√†nh c√¥ng
    createSendToken(
      newUser,
      201,
      res,
      "ƒêƒÉng k√Ω th√†nh c√¥ng! Vui l√≤ng ki·ªÉm tra email ƒë·ªÉ l·∫•y m√£ OTP x√°c minh."
    );
  } catch (error) {
    // N·∫øu g·ª≠i email th·∫•t b·∫°i ‚Üí x√≥a user
    await User.findByIdAndDelete(newUser.id);
    return next(
      new AppError("Kh√¥ng th·ªÉ g·ª≠i email x√°c minh. Vui l√≤ng th·ª≠ l·∫°i sau!", 500)
    );
  }
});
